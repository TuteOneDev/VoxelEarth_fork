import { m4 } from 'twgl.js';
import { Vector3 } from './vector';
export declare class ArcballCamera {
    isUserRotating: boolean;
    isUserTranslating: boolean;
    private _isPerspective;
    private _fov;
    private _zNear;
    private _zFar;
    private _aspect;
    private _distance;
    private _azimuth;
    private _elevation;
    private _target;
    private readonly up;
    private eye;
    private _azimuthRelief;
    private _elevationRelief;
    private _isAngleSnapped;
    private _angleSnap;
    private _gl;
    private static _instance;
    static get Get(): ArcballCamera;
    private constructor();
    init(): void;
    isPerspective(): boolean;
    isOrthographic(): boolean;
    isAlignedWithAxis(axis: 'x' | 'y' | 'z'): boolean;
    setCameraMode(mode: 'perspective' | 'orthographic'): void;
    toggleAngleSnap(): void;
    isAngleSnapEnabled(): boolean;
    updateCamera(): void;
    private _shouldSnapCameraAngle;
    getCameraPosition(azimuthOffset: number, elevationOffset: number): Vector3;
    getCameraDirection(): Vector3;
    onMouseDown(e: MouseEvent): void;
    onMouseUp(e: MouseEvent): void;
    onWheelScroll(e: WheelEvent): void;
    getProjectionMatrix(): m4.Mat4;
    getCameraMatrix(): m4.Mat4;
    getViewMatrix(): m4.Mat4;
    getViewProjection(): m4.Mat4;
    getWorldMatrix(): m4.Mat4;
    getWorldViewProjection(): m4.Mat4;
    getWorldInverseTranspose(): m4.Mat4;
    getInverseWorldViewProjection(): m4.Mat4;
    onZoomOut(): void;
    onZoomIn(): void;
    reset(): void;
    getAspect(): number;
    setAspect(aspect: number): void;
}
