import { IHashable } from './hash_map';
import { Vector3Hash } from './util/type_util';
export declare class Vector3 implements IHashable {
    x: number;
    y: number;
    z: number;
    constructor(x: number, y: number, z: number);
    set(x: number, y: number, z: number): void;
    setFrom(vec: Vector3): void;
    static fromArray(arr: number[]): Vector3;
    toArray(): number[];
    static random(): Vector3;
    static parse(line: string): Vector3;
    static copy(vec: Vector3): Vector3;
    static add(vec: Vector3, toAdd: (Vector3 | number)): Vector3;
    static sub(vec: Vector3, toAdd: (Vector3 | number)): Vector3;
    add(toAdd: (Vector3 | number)): this;
    sub(toAdd: (Vector3 | number)): this;
    static dot(vecA: Vector3, vecB: Vector3): number;
    copy(): Vector3;
    static mulScalar(vec: Vector3, scalar: number): Vector3;
    mulScalar(scalar: number): this;
    static divScalar(vec: Vector3, scalar: number): Vector3;
    divScalar(scalar: number): this;
    static lessThanEqualTo(vecA: Vector3, vecB: Vector3): boolean;
    static round(vec: Vector3): Vector3;
    round(): this;
    static abs(vec: Vector3): Vector3;
    static cross(vecA: Vector3, vecB: Vector3): Vector3;
    static min(vecA: Vector3, vecB: Vector3): Vector3;
    static max(vecA: Vector3, vecB: Vector3): Vector3;
    magnitude(): number;
    normalise(): this;
    static get xAxis(): Vector3;
    static get yAxis(): Vector3;
    static get zAxis(): Vector3;
    isNumber(): boolean;
    negate(): this;
    floor(): this;
    ceil(): this;
    hash(): Vector3Hash;
    equals(other: Vector3): boolean;
    stringify(): string;
    intoArray(array: Float32Array, start: number): void;
}
export declare const fastCrossXAxis: (vec: Vector3) => Vector3;
export declare const fastCrossYAxis: (vec: Vector3) => Vector3;
export declare const fastCrossZAxis: (vec: Vector3) => Vector3;
